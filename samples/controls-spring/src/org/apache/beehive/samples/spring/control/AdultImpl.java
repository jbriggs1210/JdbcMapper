package org.apache.beehive.samples.spring.control;

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * $Header:$
 */
import java.util.HashMap;

import org.apache.beehive.controls.api.bean.Controls;
import org.apache.beehive.controls.api.bean.ControlImplementation;
import org.apache.beehive.controls.api.bean.ControlBean;
import org.apache.beehive.controls.api.context.Context;
import org.apache.beehive.controls.api.context.ControlBeanContext;
import org.apache.beehive.controls.api.events.EventHandler;

@ControlImplementation
public class AdultImpl extends PersonImpl implements Person, java.io.Serializable
{
    @Context ControlBeanContext context;
    private HashMap<String, String> _childIdMap;

    @EventHandler(field="context",
                  eventSet=ControlBeanContext.LifeCycle.class, eventName="onCreate")
    public void onCreate()
    {
        Attributes attributes = context.getControlPropertySet(Person.Attributes.class);
        if (attributes.age() > 0 && attributes.age() <= 17)
            throw new RuntimeException("Person is a minor, not an adult!");

        _childIdMap = new HashMap<String,String>();
    }

    /**
     * This method attempts to find a child control using a child name from the children property array
     * of this control.  In some cases a value from the children array property array may not be the
     * same as the actual control ID of the control.
     *
     * Specifically for the children of 'Dean', since a specific bean definition is not provided in the
     * applicationContext.xml for either child, the SpringControlFactory will instantiate a bean with a
     * Spring bean id of  'org.apache.beehive.samples.spring.control.PersonBean' for this bean there is
     * no constructor parameter specifing the ID of the control to create.  When a control ID is not
     * provided the control framework autogenerates the ID. The autogenerated ID is not the same as the
     * 'name' parameter passed into this method, in order to lookup the child control correctly it is
     * necessary to map the value of the 'name' parameter to the actual control ID.
     */
    public PersonBean getChild(String name)
    {
        PersonBean child;
        if (_childIdMap.containsKey(name))
            child = (PersonBean)context.getBean(_childIdMap.get(name));
        else
            child = (PersonBean)context.getBean(name);

        if (child == null)
        {
            child = Controls.instantiate(PersonBean.class, null, context, name);
            _childIdMap.put(name, getLocalControlID(child.getControlID()));
        }
        return child;
    }

    /**
     * Convert a qualified controlID to a local controlID.  Qualified controlIDs look
     * like: 'root/Dean/Grant', the local id is 'Grant'
     */
    private String getLocalControlID(String qualifiedControlID)
    {
        int i = qualifiedControlID.lastIndexOf(ControlBean.IDSeparator);
        if (i > -1)
            return qualifiedControlID.substring(i+1);

        return qualifiedControlID;
    }
}

