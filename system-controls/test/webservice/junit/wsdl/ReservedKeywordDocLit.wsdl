<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions targetNamespace="http://beehive.apache.org/reservedWords"
                  xmlns:tns="http://beehive.apache.org/reservedWords"
                  xmlns:apachesoap="http://xml.apache.org/xml-soap"
                  xmlns:impl="http://beehive.apache.org/reservedWords"
                  xmlns:intf="http://beehive.apache.org/reservedWords"
                  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                  xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/"
                  xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <!--WSDL created by Apache Axis version: 1.2
Built on May 03, 2005 (02:20:24 EDT)-->
    <wsdl:types>
        <schema elementFormDefault="qualified"
                targetNamespace="http://beehive.apache.org/reservedWords"
                xmlns="http://www.w3.org/2001/XMLSchema">
            <element name="reservedWordsType"><complexType>
                <sequence>
                    <xsd:element name="abstract" nillable="true" type="xsd:int"/>
                    <xsd:element name="assert" nillable="true" type="xsd:int"/>
                    <xsd:element name="boolean" nillable="true" type="xsd:int"/>
                    <xsd:element name="break" nillable="true" type="xsd:int"/>
                    <xsd:element name="byte" nillable="true" type="xsd:int"/>
                    <xsd:element name="case" nillable="true" type="xsd:int"/>
                    <xsd:element name="catch" nillable="true" type="xsd:int"/>
                    <xsd:element name="char" nillable="true" type="xsd:int"/>
                    <xsd:element name="class" nillable="true" type="xsd:int"/>
                    <xsd:element name="const" nillable="true" type="xsd:int"/>
                    <xsd:element name="continue" nillable="true" type="xsd:int"/>
                    <xsd:element name="default" nillable="true" type="xsd:int"/>
                    <xsd:element name="double" nillable="true" type="xsd:int"/>
                    <xsd:element name="else" nillable="true" type="xsd:int"/>
                    <xsd:element name="extends" nillable="true" type="xsd:int"/>
                    <xsd:element name="false" nillable="true" type="xsd:int"/>
                    <xsd:element name="final" nillable="true" type="xsd:int"/>
                    <xsd:element name="finally" nillable="true" type="xsd:int"/>
                    <xsd:element name="float" nillable="true" type="xsd:int"/>
                    <xsd:element name="for" nillable="true" type="xsd:int"/>
                    <xsd:element name="goto" nillable="true" type="xsd:int"/>
                    <xsd:element name="if" nillable="true" type="xsd:int"/>
                    <xsd:element name="implements" nillable="true" type="xsd:int"/>
                    <xsd:element name="import" nillable="true" type="xsd:int"/>
                    <xsd:element name="instanceof" nillable="true" type="xsd:int"/>
                    <xsd:element name="int" nillable="true" type="xsd:int"/>
                    <xsd:element name="interface" nillable="true" type="xsd:int"/>
                    <xsd:element name="long" nillable="true" type="xsd:int"/>
                    <xsd:element name="native" nillable="true" type="xsd:int"/>
                    <xsd:element name="new" nillable="true" type="xsd:int"/>
                    <xsd:element name="null" nillable="true" type="xsd:int"/>
                    <xsd:element name="package" nillable="true" type="xsd:int"/>
                    <xsd:element name="private" nillable="true" type="xsd:int"/>
                    <xsd:element name="protected" nillable="true" type="xsd:int"/>
                    <xsd:element name="public" nillable="true" type="xsd:int"/>
                    <xsd:element name="return" nillable="true" type="xsd:int"/>
                    <xsd:element name="short" nillable="true" type="xsd:int"/>
                    <xsd:element name="static" nillable="true" type="xsd:int"/>
                    <!--    XMLBeans barfs - XMLBEANS-191                <xsd:element name="strictfp" nillable="true" type="xsd:int"/> -->
                    <xsd:element name="super" nillable="true" type="xsd:int"/>
                    <xsd:element name="switch" nillable="true" type="xsd:int"/>
                    <xsd:element name="synchronized" nillable="true" type="xsd:int"/>
                    <xsd:element name="this" nillable="true" type="xsd:int"/>
                    <xsd:element name="throw" nillable="true" type="xsd:int"/>
                    <xsd:element name="throws" nillable="true" type="xsd:int"/>
                    <xsd:element name="transient" nillable="true" type="xsd:int"/>
                    <xsd:element name="true" nillable="true" type="xsd:int"/>
                    <xsd:element name="try" nillable="true" type="xsd:int"/>
                    <xsd:element name="void" nillable="true" type="xsd:int"/>
                    <xsd:element name="volatile" nillable="true" type="xsd:int"/>
                    <xsd:element name="while" nillable="true" type="xsd:int"/>

                    <xsd:element name="threadsafe" nillable="true" type="xsd:int"/>
                    <xsd:element name="enum" nillable="true" type="xsd:int"/>
                    <xsd:element name="Exception" nillable="true" type="xsd:int"/>
                </sequence>
            </complexType>
            </element>

            <xsd:element name="abstract" nillable="true" type="xsd:int"/>
            <xsd:element name="assert" nillable="true" type="xsd:int"/>
            <xsd:element name="boolean" nillable="true" type="xsd:int"/>
            <xsd:element name="break" nillable="true" type="xsd:int"/>
            <xsd:element name="byte" nillable="true" type="xsd:int"/>
            <xsd:element name="case" nillable="true" type="xsd:int"/>
            <xsd:element name="catch" nillable="true" type="xsd:int"/>
            <xsd:element name="char" nillable="true" type="xsd:int"/>
            <xsd:element name="class" nillable="true" type="xsd:int"/>
            <xsd:element name="const" nillable="true" type="xsd:int"/>
            <xsd:element name="continue" nillable="true" type="xsd:int"/>
            <xsd:element name="default" nillable="true" type="xsd:int"/>
            <xsd:element name="double" nillable="true" type="xsd:int"/>
            <xsd:element name="else" nillable="true" type="xsd:int"/>
            <xsd:element name="extends" nillable="true" type="xsd:int"/>
            <xsd:element name="false" nillable="true" type="xsd:int"/>
            <xsd:element name="final" nillable="true" type="xsd:int"/>
            <xsd:element name="finally" nillable="true" type="xsd:int"/>
            <xsd:element name="float" nillable="true" type="xsd:int"/>
            <xsd:element name="for" nillable="true" type="xsd:int"/>
            <xsd:element name="goto" nillable="true" type="xsd:int"/>
            <xsd:element name="if" nillable="true" type="xsd:int"/>
            <xsd:element name="implements" nillable="true" type="xsd:int"/>
            <xsd:element name="import" nillable="true" type="xsd:int"/>
            <xsd:element name="instanceof" nillable="true" type="xsd:int"/>
            <xsd:element name="int" nillable="true" type="xsd:int"/>
            <xsd:element name="interface" nillable="true" type="xsd:int"/>
            <xsd:element name="long" nillable="true" type="xsd:int"/>
            <xsd:element name="native" nillable="true" type="xsd:int"/>
            <xsd:element name="new" nillable="true" type="xsd:int"/>
            <xsd:element name="null" nillable="true" type="xsd:int"/>
            <xsd:element name="package" nillable="true" type="xsd:int"/>
            <xsd:element name="private" nillable="true" type="xsd:int"/>
            <xsd:element name="protected" nillable="true" type="xsd:int"/>
            <xsd:element name="public" nillable="true" type="xsd:int"/>
            <xsd:element name="return" nillable="true" type="xsd:int"/>
            <xsd:element name="short" nillable="true" type="xsd:int"/>
            <xsd:element name="static" nillable="true" type="xsd:int"/>
            <!--    XMLBeans barfs - XMLBEANS-191        <xsd:element name="strictfp" nillable="true" type="xsd:int"/> -->
            <xsd:element name="super" nillable="true" type="xsd:int"/>
            <xsd:element name="switch" nillable="true" type="xsd:int"/>
            <xsd:element name="synchronized" nillable="true" type="xsd:int"/>
            <xsd:element name="this" nillable="true" type="xsd:int"/>
            <xsd:element name="throw" nillable="true" type="xsd:int"/>
            <xsd:element name="throws" nillable="true" type="xsd:int"/>
            <xsd:element name="transient" nillable="true" type="xsd:int"/>
            <xsd:element name="true" nillable="true" type="xsd:int"/>
            <xsd:element name="try" nillable="true" type="xsd:int"/>
            <xsd:element name="void" nillable="true" type="xsd:int"/>
            <xsd:element name="volatile" nillable="true" type="xsd:int"/>
            <xsd:element name="while" nillable="true" type="xsd:int"/>

            <xsd:element name="threadsafe" nillable="true" type="xsd:int"/>
            <xsd:element name="enum" nillable="true" type="xsd:int"/>
            <xsd:element name="Exception" nillable="true" type="xsd:int"/>

        </schema>
    </wsdl:types>

    <wsdl:message name="reservedWordsWrappedMsg">
        <wsdl:part element="tns:reservedWordsType" name="reserved"/>
    </wsdl:message>


    <wsdl:portType name="ReservedWordsWrapped">

        <wsdl:operation name="abstract">
            <wsdl:input message="tns:reservedWordsWrappedMsg" name="abstractReq"/>
            <wsdl:output message="tns:reservedWordsWrappedMsg" name="abstractResp"/>
        </wsdl:operation>

        <wsdl:operation name="Exception">
            <wsdl:input message="tns:reservedWordsWrappedMsg" name="ExceptionReq"/>
            <wsdl:output message="tns:reservedWordsWrappedMsg" name="ExceptionResp"/>
        </wsdl:operation>

        <wsdl:operation name="dot.name">
            <wsdl:input message="tns:reservedWordsWrappedMsg" name="dot.nameReq"/>
            <wsdl:output message="tns:reservedWordsWrappedMsg" name="dot.nameResp"/>
        </wsdl:operation>


    </wsdl:portType>

    <wsdl:binding name="ReservedWordsWrappedSoapBinding" type="impl:ReservedWordsWrapped">
        <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>

        <wsdl:operation name="abstract">
            <wsdlsoap:operation soapAction="abstract"/>
            <wsdl:input name="abstractReq">
                <wsdlsoap:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="abstractResp">
                <wsdlsoap:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>

        <wsdl:operation name="Exception">
            <wsdlsoap:operation soapAction="Exception"/>
            <wsdl:input name="ExceptionReq">
                <wsdlsoap:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="ExceptionResp">
                <wsdlsoap:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>

        <wsdl:operation name="dot.name">
        <wsdlsoap:operation soapAction="dot.name"/>
        <wsdl:input name="dot.nameReq">
        <wsdlsoap:body use="literal"/>
        </wsdl:input>
        <wsdl:output name="dot.nameResp">
        <wsdlsoap:body use="literal"/>
        </wsdl:output>
        </wsdl:operation>
    </wsdl:binding>

    <wsdl:service name="ReservedWordsSampleService">
        <wsdl:port binding="impl:ReservedWordsWrappedSoapBinding" name="ReservedWordsSample">
            <wsdlsoap:address location="http://localhost:8080/ReservedWordsSampleServiceWrappedSample.jws"/>
        </wsdl:port>
    </wsdl:service>

</wsdl:definitions>
