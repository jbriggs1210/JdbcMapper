<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
  <header>
    <title>Page Flow Class Annotations</title>
  </header>
	<body>
		<section id="toc">
			<title>Table of Contents</title>
			<ul>
				<li>
					<a href="#jpf_controller">Jpf.Controller</a>
					<ul>
						<li>
							<a href="#jpf_simpleaction">Jpf.Controller with 
								Jpf.SimpleAction</a>
						</li>
						<li>
							<a href="#jpf_forward">Jpf.Controller with 
								Jpf.Forward</a>
						</li>
						<li>
							<a href="#jpf_catch">Jpf.Controller with Jpf.Catch 
								and Jpf.ExceptionHandler</a>
						</li>
					</ul>
				</li>
			</ul>
		</section>
		<section id="jpf_controller">
			<title>
				<code>Jpf.Controller</code>
			</title>
			<ul>
				<li>
					<a 
						href="../apidocs/javadoc/org/apache/beehive/netui/pageflow/annotations/Jpf.Controller.html">
						Jpf.Controller Javadoc</a>
				</li>
			</ul>
			<p> <code>Jpf.Controller</code> is the annotation used to both 
				<strong>mark</strong> a class as a page-flow controller and may 
				additionally <strong>contain</strong> other annotations which 
				participate in the configuration. </p>
			<p> When used simply as a marker, it must simply be placed directly 
				in front of the class definition. </p>
			<source> <strong>@Jpf.Controller</strong> public class Controller 
				extends PageFlowController { ... ... } </source>
			<p> The <code>Jpf.Controller</code> annotation also has several 
				configuration properties. </p>
			<table>
				<tr>
					<th>Property</th>
					<th>Type</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>
						<code>loginRequired</code>
					</td>
					<td>
						<code>boolean</code>
					</td>
					<td>Checks user authentication and possibly throws <a 
						href="../apidocs/javadoc/org/apache/beehive/netui/pageflow/NotLoggedInException.html">NotLoggedInException</a></td>
				</tr>
				<tr>
					<td>
						<code>readOnly</code>
					</td>
					<td>
						<code>boolean</code>
					</td>
					<td>Flag to indicate this action does not modify state</td>
				</tr>
				<tr>
					<td>
						<code>rolesAllowed</code>
					</td>
					<td>
						<code>String[]</code>
					</td>
					<td>List of roles allowed to invoke this action. Implies 
						<code>loginRequired=true</code>.</td>
				</tr>
				<tr>
					<td>
						<code>nested</code>
					</td>
					<td>
						<code>boolean</code>
					</td>
					<td>Flag the pageflow as nested</td>
				</tr>
				<tr>
					<td>
						<code>singleton</code>
					</td>
					<td>
						<code>boolean</code>
					</td>
					<td>Flag the pageflow as singleton</td>
				</tr>
			</table>
			<source> <strong>@Jpf.Controller { rolesAllowed = { "admin" }; 
				nested = true; }</strong> public class AddNewUserController { 
				... } </source>
			<p> The above controller, notably not named 
				<code>Controller</code>, is a nested pageflow that requires the 
				<code>admin</code> role to be invoked. </p>
			<section id="jpf_simpleaction">
				<title>Jpf.Controller with Jpf.SimpleAction</title>
				<ul>
					<li>
						<a 
							href="../apidocs/javadoc/org/apache/beehive/netui/pageflow/annotations/Jpf.SimpleAction.html">
							Jpf.SimpleAction Javadoc</a>
					</li>
				</ul>
				<p> In addition to being a marker, simple configuration can 
					occur using the <code>Jpf.SimpleAction</code> annotation. 
					</p>
				<source>
@Jpf.Controller {
    simpleActions = {
      <strong>@Jpf.SimpleAction( name="mypage", path="mypage.jsp" )</strong>,
      <strong>@Jpf.SimpleAction( name="terms", path="terms.jsp" )</strong>
    }
}
public class Controller
    extends PageFlowController
{
    ...
    ...
}
</source>
				<p> The combination of <code>Jpf.Controller</code> and 
					<code>Jpf.SimpleAction</code> operates as short-hand for 
					the more verbose equivelent class using 
					<code>Jpf.Controller</code> as a marker with explicitly 
					defined <em>controller methods</em> with 
					<code>Jpf.Action</code> and <code>Jpf.Forward</code>. </p>
				<source>
@Jpf.Controller
public class Controller
    extends PageFlowController
{
    <strong>@Jpf.Action {
        forwards = {
            @Jpf.Forward( name="success", path="mypage.jsp" );
        }
    }
    public Forward mypage()
    {
        return new Forward( "success" );
    }</strong>

    <strong>@Jpf.Action {
        forwards = {
            @Jpf.Forward( name="success", path="terms.jsp" );
        }
    }
    public Forward terms()
    {
        return new Forward( "success" );
    }</strong>
}
</source>
			</section>
			<section id="jpf_forward">
				<title>Jpf.Controller with Jpf.Forward</title>
				<ul>
					<li>
						<a 
							href="../apidocs/javadoc/org/apache/beehive/netui/pageflow/annotations/Jpf.Forward.html">
							Jpf.Forward Javadoc</a>
					</li>
				</ul>
				<p> Global named forwards can be defined within the 
					<code>Controller</code> class annotations. </p>
				<source>
@Jpf.Controller {
    forwards = {
      <strong>@Jpf.Forward( name="error", path="/error.jsp" )</strong>
    }
}
public class Controller
{
    public Forward doSomething() 
    {
        ...
        if ( error ) 
        {
            <strong>return new Forward( "error" );</strong>
        }
    }
}
</source>
			</section>
			<section id="jpf_catch">
				<title>Jpf.Controller with Jpf.Catch and 
					Jpf.ExceptionHandler</title>
				<ul>
					<li>
						<a 
							href="../apidocs/javadoc/org/apache/beehive/netui/pageflow/annotations/Jpf.Catch.html">
							Jpf.Catch Javadoc</a>
					</li>
					<li>
						<a 
							href="../apidocs/javadoc/org/apache/beehive/netui/pageflow/annotations/Jpf.ExceptionHandler.html">
							Jpf.ExceptionHandler Javadoc</a>
					</li>
				</ul>
				<p> Global exception-handlers can be configured within the 
					<code>Controller</code> class annotations. </p>
				<source>
@Jpf.Controller {
    catches = {
        <strong>@Jpf.Catch { type=com.myco.FailedLoginException.class, method="failedLoginHandler" }</strong>
    }
}
public class Controller 
{
    <strong>@Jpf.ExceptionHandler {
      forwards = {
        @Jpf.Forward { name="try_again", path="/try_again.jps" }
      }
    }</strong>
    protected Forward failedLoginHandler(FailedLoginException e, 
                                         String actionName,
                                         String message, 
                                         LoginForm form)
    {
        ...
        return new Forward( "try_again" );
    }
}
</source>
			</section>
		</section>
	</body>
  <footer>
    <legal>
      Java, J2EE, and JCP are trademarks or registered trademarks of Sun Microsystems, Inc. in the United States and other countries.<br/>
      &copy; 2004, Apache Software Foundation 
    </legal>
  </footer>
</document>
