<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
    <header>
        <title>Glossary of Terms</title>
    </header>
    <body>
        <section id="glossaryControls">
            <title>Glossary: Controls</title>
            <dl id="control">
                <dt><strong>Control</strong></dt>
                <dd>
                Controls are designed to make it easier to integrate complex resources into your Java application.  Controls 
                consist of two Java files: a Control implementation file, and a Control interface file.
                </dd>
            </dl>
            <dl id="controlBean">
                <dt><strong>Control Bean</strong></dt>
                <dd>
                A Control Bean is a file that is generated while running the Controls annotation processing.  The Control Bean
                is the glue between a control interface and a control implementation.  When using a Control from a Control client,
                either the Control's interface or the Control Bean may be used to refer to declare a Control.  The Control Bean
                provides access to methods supporting adding / removing event listeners and getting / setting Control properties.
                </dd>
            </dl>
            <dl id="systemControl">
                <dt><strong>System Control</strong></dt>
                <dd>
                System controls are those that are low-level abstractions atop typical system resources such as EJB, JMS, JDBC, and web services.
                </dd>
            </dl>
        </section>
        <section id="glossaryNetUI">
            <title>Glossary: NetUI</title>
            <dl id="pageFlow">
                <dt><strong>page flow</strong></dt>
                <dd>
                A page flow consists of one <a href="#pageFlowController">controller</a> class and one or more pages,
                all associated with a single directory path. A web project can contain many page flows.
                </dd>
            </dl>
            <dl id="pageFlowController">
                <dt><strong>page flow controller</strong></dt>
                <dd>
                A controller class is a Java class that defines actions, exception handlers, state, etc. related to a
                <a href="#pageFlow">page flow</a>. Configuration information is defined through annotations on methods,
                fields, and the class itself.
                </dd>
            </dl>
            <dl id="sharedFlow">
                <dt><strong>shared flow</strong></dt>
                <dd>
                A shared flow is a class that defines actions, exception handlers and state which can be shared by
                <a href="#pageFlowController">page flow controller</a>s.
                </dd>
            </dl>
            <dl id="databinding">
                <dt><strong>data binding</strong></dt>
                <dd>
                <p>
                Data binding used to bind UI widgets to data in the web-tier environment.  The data objects can be located in various places throughout 
                the web application:
                </p>
                <ul>
                    <li>in the <a href="#pageFlowController">page flow controller class</a></li>
                    <li>in container provided JSP implicit objects</li>
                    <li>in NetUI framework-provided JSP implicit objects</li>
                </ul>
                <p>
                More details about data binding can be found <a href="site:databinding">here</a>.
                </p>
                </dd>
            </dl>
            <dl id="formbean">
                <dt><strong>form bean</strong></dt>
                <dd>
                <p>
                Typically, a form bean is a server-side representation of the data in an HTML &lt;form&gt; tag.  A form bean follows ordinary 
                Java Bean syntax: each form bean is a class consisting of any number of properties, each property having a setter and a getter 
                method associated with it.  Form bean classes normally implement <code>java.io.Serializable</code> in order to facilitate persistence 
                of form bean instances.  The sample form bean below has two properties; each one has a getter and setter method associated with it.
                </p>
                <source>
public class ProfileFormBean 
    implements java.io.Serializable {

    private int age;
    private String name;

    public void setAge(int age) {
        this.age = age;
    }

    public int getAge() {
       return this.age;
    }
        
    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return this.name;
    }
}               </source>
                <p>
                    Form beans are most often used to pick up data that is submitted from a <code>&lt;netui:form&gt;</code> tag.
                    Once the POST data has been mapped to a form bean instance, the form bean is passed to a Page Flow action method.
                    Note that form beans can be either standalone Java files or inner classes of a <a href="#pageFlowController">page flow controller</a>.
                </p>
                </dd>
            </dl>
            <dl id="netui_tag_lib">
                <dt><strong>NetUI JSP Tag Library</strong></dt>
                <dd>
                The JSP library for NetUI web applications.  The &lt;netui> tag library uses JSP 2.0 and NetUI databinding expressions to 
                bind UI to data provided by the <a href="#pageFlowController">page flow controller</a> and other web application data/resources.
                </dd>
            </dl>
        </section>
    </body>
    <footer>
        <legal>
        Java, J2EE, and JCP are trademarks or registered trademarks of Sun Microsystems, Inc. in the United States and other countries.<br/>
        &copy; 2004, Apache Software Foundation
        </legal>
    </footer>
</document>
