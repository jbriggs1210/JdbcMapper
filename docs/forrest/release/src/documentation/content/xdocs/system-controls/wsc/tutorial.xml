<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
    <header>
        <title>Web Service System Control Tutorial</title>
    </header>
    <body>
        <section>
            <title>Overview</title>
            <p>The Web Service Control tutorial demonstrates how to generate, build and test a web service control. Key
                topics covered include:</p>
            <ul>
                <li>Adding a WSC to a project.</li>
                <li>Generating Java classes from WSDL types.</li>
                <li>Generating and building a WSC.</li>
                <li>Using JUnit to test a WSC.</li>
            </ul>
            <p>This tutorial starts with the 'controls-blank' project template which can be found in the samples
                directory of
                the Beehive distribution. The code fragements used in the mini-tutorial are from the interop-client
                sample. The
                full source can be found in the system control samples directory.
            </p>
            <p>For additional information about the web service control see the
                <a href="guide.html">Web Service Control Developer's Guide</a>
                .
            </p>
        </section>
        <section>
            <title>Tutorial</title>
            <section>
                <title>Step 1: Install Tutorial Dependencies</title>
                <section id="bee_inst">
                    <title>Install Beehive</title>
                    <p>
                        Complete all of the required and optional steps to install and setup Beehive
                        <a class="fork" href="site:setup">here</a>
                        .
                    </p>
                </section>
                <section>
                    <title>Install Apache Axis</title>
                    <p>
                        Apache Axis 1.3 or later is required at build and runtime by the WSC.
                        Apache Axis can be downloaded
                        <a href="http://ws.apache.org/axis/">here</a>
                        . Once downloaded
                        install the Axis distribution to a local directory.
                    </p>
                </section>
                <section>
                    <title>Install JUnit</title>
                    <p>
                        In this tutorial, JUnit is the test framework used. In order to use JUnit, download a JUnit
                        release
                        <a href="http://sourceforge.net/project/showfiles.php?group_id=15278">here</a>
                        and unzip it into a local
                        directory.
                    </p>
                </section>
                <section>
                    <title>Create a Control Project</title>
                    <p>
                        Copy the directory
                        <code>&lt;BeehiveRoot>/samples/controls-blank</code>
                        to a location of your choice. For example, you might copy
                        to the following location:
                        <code>/beehive-projects/controls-blank</code>
                        .
                    </p>
                    <p>
                        Rename
                        <code>controls-blank</code>
                        to
                        <code>wsc_tutorial</code>
                        .
                    </p>
                    <p>
                        Edit the file
                        <code>wsc_tutorial/build.properties</code>
                        so that the property
                        <code>beehive.home</code>
                        points
                        to the top level folder of your Beehive distribution.
                    </p>
                    <p>
                        Add the property
                        <code>junit.home</code>
                        to the file and ensure that it points to your JUnit installation.
                    </p>
                    <p>
                        Add the property
                        <code>axis.home</code>
                        to the file and ensure that it points to your Axis installation.
                    </p>
                    <p>
                        For example, if Beehive distribution is located in
                        <code>/apache/apache-beehive-1.0.2</code>
                        and JUnit is located in
                        <code>/test-tools/junit</code>
                        , then your
                        <code>build.properties</code>
                        file
                        would appear as follows:
                    </p>
                    <source>
                        beehive.home=
                        <strong>/apache/apache-beehive-1.0.2</strong>

                        junit.home=
                        <strong>/test-tools/junit</strong>

                        axis.home=
                        <strong>/apps/axis</strong>
                    </source>
                    <note>
                        Properties files should use the '/' character to separate drive, directory, and file names.
                    </note>
                </section>
            </section>

            <section>
                <title>Step 2: Web Service Used in This Tutorial</title>
                <p>This tutorial uses a web service designed to test SOAP Interoperability, it is a .NET service. The
                    web service's WSDL can be found at:
                    <a href="http://mssoapinterop.org/asmx/xsd/round4XSD.wsdl">
                        http://mssoapinterop.org/asmx/xsd/round4XSD.wsdl</a>
                    . Notice that there are
                    several complex types defined by the WSDL. In order to generate a WSC from this WSDL it will be
                    necessary to
                    first generate Java classes from those types.
                </p>
                <p>
                    <strong>For this particular WSDL type generation is not required. If the types are not present during
                        generation the WSC's interface will declare method parameters and return types which correspond
                        to these
                        complex types as
                        <code>java.lang.Object</code>
                        .
                    </strong>
                </p>
            </section>

            <section>
                <title>Step 3: WSDL Type Generation</title>
                <p>Java classes can be generated from WSDL types using any of the following methods:</p>
                <ul>
                    <li>POJOs</li>
                    <li>Apache XMLBeans</li>
                    <li>Axis type generation</li>
                    <li>Any other method which can generate Java classes from WSDL complex types</li>
                </ul>

                <p>In this tutorial the
                    <code>AxisTypeGeneratorTask</code>
                    Ant task will be used to generate the Java classes from the WSDL types. This Ant task is included
                    as part of the WSC distribution jar.
                </p>

                <p>Modify the build classpath as follows:</p>
                <source>
                    &lt;path id="build.classpath"&gt;
                    &lt;pathelement path="${build.classes}"/&gt;
                    &lt;path refid="controls.dependency.path"/&gt;
                    <strong>&lt;path refid="wsc.dependency.path"/&gt;</strong>>
                    &lt;/path&gt;
                </source>

                <p>Insert the following block of code:</p>
                <source><strong>
                    &lt;property name="source.dir" location="${build.dir}/src"/&gt;
                    &lt;property name="junit.source.dir" location="${basedir}/junit"/&gt;
                    &lt;property name="build.typesrc" location="${build.dir}/typesrc"/&gt;

                    &lt;fileset id="axis.jars" dir="${axis.home}"&gt;
                    &lt;include name="**/*.jar"/&gt;
                    &lt;/fileset&gt;
                    &lt;fileset id="commons.jars" dir="${beehive.home}/lib/common"&gt;
                    &lt;include name="**/*.jar"/&gt;
                    &lt;/fileset&gt;

                    &lt;target name="gen.wsdl.types" description="Generate and compile java classes from WSDL types."&gt;

                    &lt;path id="_typegen.classpath"&gt;
                    &lt;path refid="build.classpath"/&gt;
                    &lt;fileset refid="axis.jars"/&gt;
                    &lt;fileset refid="commons.jars"/&gt;
                    &lt;/path&gt;

                    &lt;taskdef name="axisbeanbuild"
                    classname="org.apache.beehive.controls.system.jaxrpc.AxisTypeGeneratorTask"
                    classpathref="_typegen.classpath"/&gt;

                    &lt;axisbeanbuild wsdlsrc="http://mssoapinterop.org/asmx/xsd/round4XSD.wsdl"
                    outputdir="${build.beansrc}"/&gt;
                    &lt;javac srcdir="${build.typesrc}" destdir="${build.classes}" classpathref="_typegen.classpath"
                    debug="true"/&gt;
                    &lt;/target&gt;

                    &lt;target name="init.dirs"&gt;
                    &lt;mkdir dir="${source.dir}"/&gt;
                    &lt;mkdir dir="${build.classes}"/&gt;
                    &lt;mkdir dir="${build.beansrc}"/&gt;
                    &lt;mkdir dir="${build.typesrc}"/&gt;
                    &lt;mkdir dir="${build.dir}/junit-logs"/&gt;
                    &lt;/target&gt;
                </strong>
                </source>
                <p>To test your changes, run 'ant clean init.dirs gen.wsdl.types' from the command line. A number of
                    Java class files
                    should be generated and placed in the build/classes directory. These classes will be used during the
                    generation of the
                    WSC and also at runtime.
                </p>
            </section>
            <section>
                <title>Step 4: WSC Generation</title>
                <p>Now the WSC can be generated, use the
                    <code>generate-wsc</code>
                    Ant macro. Add the following to the build target in the build.xml file:
                </p>
                <source>
                    &lt;target name="build"
                    <strong>>depends="init.dirs, gen.wsdl.types"</strong>>
                    description="Build control sources"&gt;

                    <strong>>
                        &lt;generate-wsc wsdlsrc="http://mssoapinterop.org/asmx/xsd/round4XSD.wsdl"
                        wscgendir="${source.dir}"
                        tempdir="${build.beansrc}" destdir="${build.classes}"
                        packagename="mssoapinterop" copywsdl="true"
                        serviceport="Round4XSDTestSoap" classpathref="build.classpath"/&gt;
                    </strong>>
                    &lt;build-controls srcdir="
                    <strong>{junit.source.dir}</strong>>
                    "
                    destdir="${build.classes}"
                    tempdir="${build.beansrc}"
                    classpathref="build.classpath"/&gt;

                    &lt;control-jar destfile="${build.dir}/${build.jar}" basedir="${build.classes}" /&gt;
                    &lt;/target&gt;
                </source>
                <p>For this particular WSDL the
                    <code>generate-wsc</code>
                    macro needs to set the serviceport value since the WSDL defines multiple service ports. Also note
                    that since
                    the copywsdl attribute has been set to true that a copy of the WSDL file is placed in the same
                    location as the generated web service control. To try out your changes
                    run 'ant clean build' from the command line. A WSC will be generated and compiled. The source of the
                    generated WSC can be found in the build/src directory. The WSC
                    will contain a method for each operation defined by the WSDL.
                </p>
            </section>
            <section>
                <title>Step 5: Testing the WSC with JUnit</title>
                <p>First create the JUnit test file in
                    <code>wsc_tutorial/junit/tests</code>
                </p>
                <source>
                    package tests;

                    import mssoapinterop.Round4XSDTest;
                    import org.apache.beehive.controls.test.junit.ControlTestCase;
                    import org.apache.beehive.controls.api.bean.Control;

                    /**
                    * Junit test case for the interop-client web service system control sample.
                    */
                    public class InteropTest extends ControlTestCase {

                    @Control
                    private Round4XSDTest _interopCtrl;

                    /**
                    * Test echoing a string.
                    */
                    public void testEchoString() throws Exception {
                    assertNotNull(_interopCtrl);
                    assertEquals("HelloWorld", _interopCtrl.echoString("HelloWorld"));
                    }

                    /**
                    * Test echoing an Integer.
                    */
                    public void testEchoInteger() throws Exception {
                    assertNotNull(_interopCtrl);
                    assertEquals(6, _interopCtrl.echoInteger(6));
                    }
                    }
                </source>
                <p>Note that the InteropTest extends the
                    <code>org.apache.beehive.controls.test.junit.ControlTestCase</code>
                    class. This class
                    provides a standalone control test container for JUnit testing and is included as part of the
                    standard Beehive distribution.
                    When using the class control's can be tested in JUnit without having to deploy them to an
                    application server.
                </p>

                <p>Now add the following target to the build.xml file:</p>
                <source><strong>

                    &lt;target name="junit.test" depends="build" description="Run the JUnit tests for this project."&gt;

                    &lt;path id="_test.classpath"&gt;
                    &lt;path refid="build.classpath"/&gt;
                    &lt;pathelement location="${junit.home}/junit.jar"/&gt;
                    &lt;fileset refid="axis.jars"/&gt;
                    &lt;fileset refid="commons.jars"/&gt;
                    &lt;/path&gt;

                    &lt;junit printsummary="yes" showOutput="true" failureproperty="controls.junit.failure"
                    errorproperty="controls.junit.error"&gt;
                    &lt;classpath refid="_test.classpath"/&gt;
                    &lt;formatter type="plain"/&gt;
                    &lt;batchtest fork="yes" todir="${build.dir}/junit-logs"&gt;
                    &lt;fileset dir="${build.classes}"&gt;
                    &lt;include name="**/*Test.class"/&gt;
                    &lt;exclude name="**/Round4XSDTest.class"/&gt;
                    &lt;/fileset&gt;
                    &lt;/batchtest&gt;
                    &lt;/junit&gt;

                    &lt;fail if="controls.junit.failure" message="Controls JUnit tests had a failure"/&gt;
                    &lt;fail if="controls.junit.error" message="Controls JUnit tests had an error"/&gt;
                    &lt;/target&gt;
                    </strong>
                </source>
                <p>To run the JUnit test run 'ant clean junit.test' from the command line. The complete source for this
                    tutorial can be found in the interop-client sample in the system-controls/samples/webservice
                    directory.</p>
            </section>
        </section>
    </body>
</document>
