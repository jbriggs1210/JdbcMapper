<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
    <header>
        <title>Web Service Control Developer's Guide</title>
    </header>
    <body>
        <section>
            <title>Overview</title>
            <p>If you have ever created a JAX-RPC client without the aid of development tools you will
                really appreciate the web service control. A web service control (WSC) is generated
                from a WSDL file using the WebServiceControlGeneratorTask Apache Ant task. The WSC
                contains public methods for each operation defined by the WSDL. Just invoke a WSC
                method to invoke the web service operation.</p>
        </section>
        <section>
            <title>Supported Web Services</title>
            <p>Just about any web service should work with the WSC including (but not limited to):</p>
            <ul>
                <li>Apache Axis</li>
                <li>.NET</li>
                <li>NuSOAP</li>
                <li>Visual Dataflex</li>
                <li>Cold Fusion</li>
                <li>Delphi</li>
                <li>SOAPLite</li>
            </ul>
        </section>
        <section>
            <title>External Dependencies</title>
            <p>The underlying JAX-RPC client of a WSC is currently Axis 1.2.x, an Apache Axis distribution needs
                to be available to generate and run a WSC.</p>
        </section>
        <section>
            <title>Runtime Dependencies</title>
            <p>The current version of the WSC requires that the WSDL file that was used to generate it be accessible at
                runtime
                (in the runtime classpath). This requirement will be reviewed for future releases.</p>
        </section>
        <section>
            <title>Adding a WSC to Your Project</title>
            <p>The basic steps necessary to add a WSC to your project are:</p>
            <ol>
                <li>Modify your build script to generate Java classes from the WSDL's types (XMLBeans, POJOs, Axis,
                    etc.).</li>
                <li>Use the
                    <code>generate-wsc</code>
                    Ant macro to generate and build the WSC.
                </li>
            </ol>
            <p>The generate-wsc documentation can be found
                <a href="#_genwsc">here</a>
                . Refer to the
                <a href="tutorial.html">WSC Tutorial</a>
                for additional information about adding a WSC to your project.
            </p>
        </section>
        <section>
            <title>WSDL type -> Java Class Generation</title>
            <p>WSDL type generation must occur before a WSC can be generated from the WSDL file.
                The included
                <code>AxisTypeGenerator</code>
                Ant task can be used to generate Java types from the WSDL.
                Any other tool may be used for type generation including Apache XMLBeans. The only requirement
                is that the generated class files are in the classpath when the WSC is generated and run.
            </p>
        </section>
        <section>
            <title>WSC Generation</title>
            <p>A web service control is generated from a WSDL. There are several ways to generate a WSC from an Ant
                build file including the
                <code>generate-wsc</code>
                Ant macro and also the
                <code>WebServiceControlGeneratorTask</code>
                Ant task. For any given WSDL
                a WSC is generated based on a service and port defined in that WSDL. If a WSDL defines multiple services
                or ports the first
                one found during generation will be used -- in this case it is usually a good idea to specify the
                particular service name and port
                name to the generator.
            </p>
            <p>When generating a WSC there are several options for specifing where the WSDL is. The WSDL can be
                specified by a URL, it can
                be a local file, or a directory of WSDL's may be specfied. For the latter a WSC is generated for each
                WSDL in the specified
                directory.
            </p>

            <p>A WSC must be able to locate the WSDL file used to generate it at runtime. The
                <code>wsdlRuntimePath</code>
                attribute may be optionally
                used to specify that location. If not set the WSC generator will compute this value.
            </p>

        </section>
        <section>
            <title>WSC API</title>
            <p>In addition to the generated public interface all web service controls share a common API,
                the API methods include:</p>
            <ul>
                <li>
                    <code>public URL getEndpoint()</code>
                    - returns the current service endpoint.
                </li>
                <li>
                    <code>public void setEndpoint()</code>
                    - sets the service endpoint.
                </li>
                <li>
                    <code>public String getPassword()</code>
                    - get the last password for the service set by the setPassword() API.
                </li>
                <li>
                    <code>public void setPassword(String)</code>
                    - set the password for the service.
                </li>
                <li>
                    <code>public String getUsername()</code>
                    - get the last username for the service set by the setUsername() API.
                </li>
                <li>
                    <code>public void setUsername(String)</code>
                    - set the username for the service.
                </li>
                <li>
                    <code>public void setHandlers(List&lt;HandlerInfo&gt;)</code>
                    - set JAX-RPC handlers.
                </li>
            </ul>
            <p>For additional information about these APIs see the JavaDoc for the
                <code>org.apache.beehive.controls.system.webservice.ServiceControl</code>
                interface.
            </p>
        </section>
        <section>
            <title>Modifing a WSC</title>
            <p>Once a WSC has been generated, if necessary it can be modified, however; none of the generated methods
                which correspond to WSDL operations should be modified or unexpected behavior might ensue.</p>
        </section>
        <section>
            <title>JAX-RPC Handler Support</title>
            <p>For a more detailed discussion of what JAX-RPC handlers are and how they are used please
                see the JAX-RPC specification.</p>
            <p>To add a handler to a WSC, create the JAX-RPC handler, configure a
                <code>javax.xml.rpc.HandlerInfo</code>
                instance for the handler and register it with the WSC via the WSC public API
                <code>setHandlers(List&lt;HandlerInfo&gt;)</code>
                .
            </p>
            <p>The remove or reconfigure existing handlers use the setHandlers api with an empty List
                to remove all handlers, or a modified list to modify handlers already registered with the WSC.</p>
        </section>
        <section>
            <title>Extending the WSC to Use Other JAX-RPC Clients</title>
            <p>The current WSC implementation is based on the Apache Axis JAX-RPC client.
                With a bit of work it can be extended to use any other JAX-RPC client. There are
                several classes which need to be implemented, with a degree of complexity that will
                depend almost entirely on the JAX-RPC client implementation.</p>

            <p>All Axis specific classes can be found in:</p>
            <p>&lt;beehive_src_home&gt;/system-controls/src/webservice/jaxrpc-clients/axis</p>

            <p>These include a AxisCall implemenation of the Beehive JAX-RPC Call abstraction and an
                AxisTypeRegistrar implementation of JAX-RPC type support. Both of these classes
                will need to be re-implemented for a new JAX-RPC client.</p>

            <p>In addition the ServiceControl interface's ServiceFactoryProviderType enum should
                be updated to include a new enum type for the new client.</p>
        </section>
        <section>
            <title>WSC Ant Tasks</title>
            <section>
                <title>WebServiceControlGeneratorTask</title>
                <p>
                    <strong>Description</strong>
                </p>
                <p>This Ant task generates a web service control (WSC) from a WSDL. WSDL types are
                    translated/transformed into concrete Java types, which are expected to be in this
                    task's classpath. This task can process all WSDL files in a specified directory or
                    single WSDL (either file or URL).</p>
                <p>The class name of the generated WSC will be the name of the service defined by the
                    WSDL used for WSC generation (the service name is Javatized as necessary to
                    be a legal Java class name).</p>


                <p>
                    <strong>Parameters</strong>
                </p>
                <table>
                    <tr>
                        <th>Attribute</th>
                        <th>Description</th>
                        <th>Required</th>
                    </tr>
                    <tr>
                        <td>destDir</td>
                        <td>Location to write the generated WSC.</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>wsdlSrc</td>
                        <td>File, directory or URL containing the WSDL file(s) to generate WSC(s) from.</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>copyWsdl</td>
                        <td>If set to true WSDL file is copied to the same location as the generated WSC. Default value
                            is false.</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>destPackageName</td>
                        <td>The Java(tm) package name of the generated control. Defaults to no package.</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>serviceName</td>
                        <td>The name of the service in the WSDL which should be used to generate the WSC.
                            If not specified and multiple services are present the first service found in the WSDL
                            will be used for WSC generation.</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>serviceNamespace</td>
                        <td>The namespace of the serviceName attribute.</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>servicePort</td>
                        <td>The port name of the service to be used for WSC generation. If
                            not specified and multiple ports are present, the first port found will be
                            used for WSC generation.</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>wsdlRuntimePath</td>
                        <td>The runtime location of the WSDL file. If not specified will be generated
                            automagically.</td>
                        <td>No</td>
                    </tr>
                </table>

                <p>
                    <strong>Parameters specified as nested elements</strong>
                </p>
                <p>None.</p>

                <p>
                    <strong>Examples</strong>
                </p>
                <source>
                    &lt;taskdef name="wsc-gen"
                    classname="org.apache.beehive.controls.system.webservice.generate.WebServiceControlGenerationTask"
                    classpathref="wscgen.dependency.path"/&gt;
                    &lt;wsc-gen
                    wsdlSrc="http://myservice.net/service?wsdl"
                    destDir="src"
                    copyWsdl="true"
                    servicePort="RPCClient"
                    destPackageName="wscpkg"/&gt;
                </source>
                <p>Will generate a WSC from the WSDL file at http://myservice.net/service?wsdl with a package
                    name of 'wscpkg' and will copy the WSDL file into the same directory as the generated WSC.</p>
            </section>
            <section>
                <title>AxisTypeGeneratorTask</title>
                <p>This Ant task processes a WSDL and generates Java types from the WSDL's complex types.
                    As currently implemented this task is an extension to the
                    <code>org.apache.axis.wsdl.toJava.JavaGeneratorFactory</code>
                    which only generates the
                    Java types (does not generate Axis skeletons/stubs/etc).
                </p>
                <p>
                    <strong>Parameters</strong>
                </p>
                <table>
                    <tr>
                        <th>Attribute</th>
                        <th>Description</th>
                        <th>Required</th>
                    </tr>
                    <tr>
                        <td>outputDir</td>
                        <td>Location to write the generated Java types source files.</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>wsdlDir</td>
                        <td>Directory containing WSDLs to generate Java types from.</td>
                        <td>Yes</td>
                    </tr>
                </table>
                <p>
                    <strong>Parameters specified as nested elements</strong>
                </p>
                <p>None.</p>
                <p>
                    <strong>Examples</strong>
                </p>
                <source>
                    &lt;taskdef name="axis-type-gen"
                    classname="org.apache.beehive.controls.system.jaxrpc.AxisTypeGeneratorTask"
                    classpathref="client.classpath"/&gt;

                    &lt;axis-type-gen wsdldir="/tmp/wsdls" outputdir="/tmp/wsdl-types-src"/&gt;
                </source>

                <p>Will generate Java types from the WSDL file(s) in '/tmp/wsdls' into the specified output
                    directory.</p>
            </section>
        </section>
        <section>
            <title>WSC Ant Macros</title>
            <section id="_genwsc">
                <title>generate-wsc</title>
                <p>This Ant macro generates and optionally compiles a WSC. It uses the WebServiceControlGeneratorTask
                    and the necessary build
                    commands to compile the generated control. The compilation step is disabled by setting the
                    <code>nocompile</code>
                    attribute
                    to true.
                </p>
                <p>
                    <strong>Parameters</strong>
                </p>
                <table>
                    <tr>
                        <th>Attribute</th>
                        <th>Description</th>
                        <th>Required</th>
                    </tr>
                    <tr>
                        <td>wsdlsrc</td>
                        <td>Location of the WSDL. May be either a file, directory or URL.</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>wscgendir</td>
                        <td>Location to generate the WSC. If a package name has been specified the package directories
                            will be placed directly under
                            this directory.</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>tempdir</td>
                        <td>The temporary directory for generated Java source files.</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>destdir</td>
                        <td>The directory for Java class files.</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>copywsdl</td>
                        <td>Copy WSDL file used to generate WSC to WSC generation location.</td>
                        <td>No, defaults to false.</td>
                    </tr>
                    <tr>
                        <td>packagename</td>
                        <td>Name of Java package for generated WSC.</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>nocompile</td>
                        <td>Flag to decide whether to skip compilation.</td>
                        <td>No, defaults to false.</td>
                    </tr>
                    <tr>
                        <td>servicename</td>
                        <td>If WSDL contains multiple services, use to specify service name for WSC generation.</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>servicenamespace</td>
                        <td>If WSDL contains multiple services, use to specify namespace of service.</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>serviceport</td>
                        <td>If service contains multiple ports, use to specify port name.</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>serviceport</td>
                        <td>If service contains multiple ports, use to specify port name.</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>wsdlruntimepath</td>
                        <td>Location of WSDL at runtime.</td>
                        <td>No, auto generated if not specified.</td>
                    </tr>
                    <tr>
                        <td>classpathref</td>
                        <td>The classpath reference for building the controls.</td>
                        <td>Yes</td>
                    </tr>
                </table>

                <p>
                    <strong>Parameters specified as nested elements</strong>
                </p>
                <p>None.</p>

                <p>
                    <strong>Examples</strong>
                </p>
                <source>
                    &lt;generate-wsc wsdlsrc="http://localhost:8080/myservice?wsdl" wscgendir="build/src"
                    tempdir="build/gensrc" destdir="build/classes"
                    packagename="wsc.axis.sample" copywsdl="true"
                    classpathref="build.classpath"/&gt;
                </source>

                <p>Generates a service control from the WSDL at http://localhost:8080/myservice?wsdl. A Copy of WSDL
                    file
                    is stored in the same location as the compiled WSC. The
                    <a href="tutorial.html">WSC Tutorial</a>
                    contains
                    a detailed example of the use of this macro.
                </p>
            </section>
        </section>
    </body>
</document>
