<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
    <header>
        <title>Beehive Ant Macros</title>
    </header>
    <body>
        <section id="overview">
            <title>Overview</title>
            <p>The Beehive distribution includes several Ant macros to assist developers creating Ant build files for
              NetUI Page Flow, Controls and Web Services.  These macros are located in the
              &lt;BeehiveHome&gt;/ant/beehive-tools.xml file.</p>
            <p>To use any of these macros import the beehive-tools file into your Ant script:</p>
              <source>&lt;import file="${beehive.home}/ant/beehive-tools.xml"/&gt;</source>
        </section>
        <section id="buildControls">
        <title>The build-controls Ant Macro</title>
            <p>This macro uses the Java 5 Annotation Processing Tool (apt) for
            control generation and compilation. Any .java files generated by this macro can be found in the
            directory specifed by the <code>tempdir</code> parameter.
            </p>
            <p><code>build-controls</code> accepts the following parameters:</p>
            <table>
            <tr><th>Parameter Name</th><th>Required</th><th>Description</th></tr>
              <tr>
                <td>srcdir</td>
                <td>Yes</td>
                <td>The directory containing the controls to build.</td>
              </tr>
              <tr>
                <td>destdir</td>
                <td>Yes</td>
                <td>The destination directory for the compiled controls files.</td>
              </tr>
              <tr>
                <td>tempdir</td>
                <td>Yes</td>
                <td>A temporary directory for any generated java files.</td>
              </tr>
              <tr>
                 <td>classpathref</td>
                 <td>Yes</td>
                 <td>A classpath reference for building the controls. Required.</td>
              </tr>
            </table>
            <p> </p>
            <section>
                <title>Sample</title>
                <p>
                    The following project has a source directory, a destination directory, and a temporary directory for
                    generated files.
                </p>
                <source>
project
    build
        classes
    src
    tempsrc     </source>
                <p>
                    For this project, the <code>build-controls</code> call would look like this:
                </p>
                <source>
&lt;build-controls srcdir="project/src"
                destdir="project/build/classes"
                tempdir="project/tempsrc"
                classpathref="<em>build.classpath</em>"/&gt;</source>
            </section>
        </section>
        <section id="buildPageflows">
        <title>The build-pageflows Ant Macro</title>

        <p>This macro is intended for the compilation of the <strong>Page Flow</strong> portions of a web application.
         This macro will <strong>not</strong> compile controls inside of a web application.  If the web application
         contains controls, they must be compiled first using the <code>build-controls</code> macro (see above).
         0nce the compilation of the controls is complete, the page flows within the web app can be compiled.</p>

           <p><code>build-pageflows</code> accepts the following pararmeters:</p>
           <table>
            <tr><th>Parameter Name</th><th>Required</th><th>Description</th></tr>
              <tr>
                <td>srcdir</td>
                <td>Yes</td>
                <td>The root directory which will be scanned for source files.</td>
              </tr>
              <tr>
                <td>classpathref</td>
                <td>Yes</td>
                <td>The classpath reference for building page flows.</td>
              </tr>
              <tr>
                <td>sourcepathref</td>
                <td>No</td>
                <td>A reference to a path that contains all the source roots.  Defaults to a path that
                contains ${srcdir} and ${srcdir}/WEB-INF/src.</td>
              </tr>
              <tr>
                <td>webcontentdir</td>
                <td>No</td>
                <td>The root location for web content (e.g., JSPs, web.xml, etc.).  Defaults to ${srcdir}.</td>
              </tr>
              <tr>
                <td>destdir</td>
                <td>No</td>
                <td>The directory for compiled classes and generated resources.  Defaults to ${srcdir}/WEB-INF/classes.</td>
              </tr>
              <tr>
                <td>tempdir</td>
                <td>No</td>
                <td>The directory for temporary .java files, copied from page flows (etc.) with non-.java extensions.
                    Defaults to ${srcdir}/WEB-INF/.tmpbeansrc.</td>
              </tr>
           </table>

            <section>
                <title>Samples</title>
                <p>
                    Consider a simple project with the following structure:
                </p>
                <source>
project
    WEB-INF
        classes
        lib
        src
        web.xml </source>
                <p>
                    For this project, the <code>build-pageflows</code> call would look like this:
                </p>
                <source>
&lt;build-pageflows srcdir="project" classpathref="<em>webapp.build.classpath</em>"/&gt;</source>
                <p>
                    In a more complex project, web content, source, and the target (build) directory may be in different
                    places:
                </p>
                <source>
project
    src
    web
        WEB-INF
            lib
            web.xml
build
    webapp      </source>
                <p>
                    In this case, the <code>build-pageflows</code> call would be:
                </p>
                <source>
&lt;build-pageflows srcdir="project/src"
                 webcontentdir="project/web"
                 destdir="project/build/webapp/WEB-INF/classes"
                 classpathref="<em>webapp.build.classpath</em>"/&gt;</source>
            </section>
        </section>

        <section id="buildSchemas">
        <title>The build-schemas Ant Macro</title>
        <p>This macro can be used to parse an XML Schema or Apache XMLBeans xsdconfig file into
        Apache XMLBeans.  It is really just a wrapper for the XMLBean schema compiler which is part
        of the Apache XMLBeans distribution.</p>
        <p><code>build-schemas</code> accepts the following pararmeters:</p>
        <table>
            <tr><th>Parameter Name</th><th>Required</th><th>Description</th></tr>
            <tr>
              <td>srcdir</td>
              <td>Yes</td>
              <td>The directory containing XML Schemas or XMLBeans xsdconfig files to build.</td>
            </tr>
            <tr>
              <td>destdir</td>
              <td>Yes</td>
              <td>The directory to use for files generated during an XSD build.</td>
            </tr>
        </table>

        <section>
            <title>Sample</title>
            <p>
                In this example, schemas are being built from a webapp's WEB-INF/schemas to WEB-INF/classes.
            </p>
            <source>&lt;build-schemas srcdir="WEB-INF/schemas" destdir="WEB-INF/classes"/&gt;</source>
        </section>
        </section>
    </body>
</document>
