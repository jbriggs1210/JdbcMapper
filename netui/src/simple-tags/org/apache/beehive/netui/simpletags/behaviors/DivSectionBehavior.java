/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * $Header:$
 */
package org.apache.beehive.netui.simpletags.behaviors;

import org.apache.beehive.netui.simpletags.appender.Appender;
import org.apache.beehive.netui.simpletags.core.Behavior;
import org.apache.beehive.netui.simpletags.core.TagContext;
import org.apache.beehive.netui.simpletags.core.services.BehaviorStack;
import org.apache.beehive.netui.simpletags.rendering.DivTag;
import org.apache.beehive.netui.simpletags.rendering.TagRenderingBase;
import org.apache.beehive.netui.simpletags.util.ContextUtils;

public class DivSectionBehavior extends Behavior
{
    private DivTag.State _state = new DivTag.State();
    private boolean _visible = true;
    private String _bodyContent;

    /**
     * Returns the name of the Tag.  This is used to
     * identify the type of tag reporting errors.
     * @return a constant string representing the name of the tag.
     */
    public String getTagName() {
        return "DivSection";
    }

    /**
     * Sets the visible state of the tag.
     * @param visible <code>Boolean</code> value representing the visible state.
     *
     * @jsptagref.attributedescription
     * Boolean. Determines if the section is visible.
     *
     * @jsptagref.databindable false
     *
     * @jsptagref.attributesyntaxvalue <i>boolean_literal_visible</i>
     *
     * @netui:attribute required="false" rtexprvalue="true" type="boolean"
     * description="Determines if the section is visible."
     */
    public void setVisible(boolean visible) {
        _visible = visible;
    }

    public void setBodyContent(String bodyContent) {
        _bodyContent = bodyContent;
    }

    //******************* Lifecycle Methods ************************************

    /**
     * This method will push the Behavior on the behavior stack.  All overrides of
     * this method should call this method so that the stack is maintained correctly.
     */
    public void preRender()
    {
        TagContext tagCtxt = ContextUtils.getTagContext();
        BehaviorStack stack = tagCtxt.getBehaviorStack();
        Behavior parent = stack.getParent(null);
        if (!(parent instanceof DivPanelBehavior)) {
            // @todo: this can also be a repeater
            // @todo: this would be an error
        }
        String id = _state.id;
        _state.id = getIdForTagId(id);
    }

    /**
     * This method will render the start tag for the markup generated by the behavior.
     * @param appender The <code>Appender</code> to write the markup into.
     */
    public void renderStart(Appender appender)
    {
        if (!_visible)
            return;

        TagRenderingBase br = TagRenderingBase.Factory.getRendering(TagRenderingBase.DIV_TAG);
        br.doStartTag(appender, _state);
   }

    /**
     * This method will render teh end tag for the markup generted by the behavior.
     * @param appender The <code>Appender</code> to write the markup into.
     */
    public void renderEnd(Appender appender)
    {
        if (!_visible)
            return;

        if (hasErrors()) {
            reportErrors(appender);
            return;
        }

        if (_bodyContent != null)
            appender.append(_bodyContent);

        TagRenderingBase br = TagRenderingBase.Factory.getRendering(TagRenderingBase.DIV_TAG);
        br.doEndTag(appender);
        return;
    }

    /**
     * This method will pop the Behavior off of the Behavior stack.  It should always be called when
     * the method is overriden.
     */
    public void postRender()
    {
   }
}
