/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * $Header:$
 */
// ------------------------------------------------------------------------------
//  Generated by WebLogic Workshop
// 
//  Created on: Sat Jul 19 16:12:10 MDT 2003
//  By: rich
// -----------------------------------------------------------------------------
package pageFlowCore.returnToTest.nested;
import org.apache.beehive.netui.pageflow.Forward;
import org.apache.beehive.netui.pageflow.PageFlowController;
import org.apache.beehive.netui.pageflow.annotations.Jpf;
import pageFlowCore.returnToTest.InputForm;

@Jpf.Controller(nested = true)
public class nestedController extends PageFlowController
{
    private Forward getInputOverrideForward()
    {
        Forward fwd = new Forward( "success", "input1", "override input #1 from nested pageflow" );
        fwd.addPageInput( "input2", "override input #2 from nested pageflow" );
        return fwd;
    }
    
    private Forward getFormOverrideForward()
    {
        InputForm form = new InputForm();
        form.setFoo( "override foo from nested" );
        form.setBar( "override bar from nested" );
        return new Forward( "success", form );
    }

    /**
     * This method represents the point of entry into the pageflow
     * @jpf:action
     * @jpf:forward name="success" path="index.jsp"
     */
    @Jpf.Action(
        forwards = {
            @Jpf.Forward(
                name = "success",
                path = "index.jsp") 
        })
    protected Forward begin()
    {
        return new Forward( "success" );
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" return-action="returnToPreviousPage"
     */
    @Jpf.Action(
        forwards = {
            @Jpf.Forward(
                name = "success",
                returnAction = "returnToPreviousPage") 
        })
    protected Forward returnToPreviousPageOverrideInputs()
    {
        return getInputOverrideForward();
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" return-action="returnToCurrentPage"
     */
    @Jpf.Action(
        forwards = {
            @Jpf.Forward(
                name = "success",
                returnAction = "returnToCurrentPage") 
        })
    protected Forward returnToCurrentPage()
    {
        return new Forward("success");
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" return-action="returnToPage"
     */
    @Jpf.Action(
        forwards = {
            @Jpf.Forward(
                name = "success",
                returnAction = "returnToPage") 
        })
    protected Forward returnToPage()
    {
        return new Forward("success");
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" return-action="returnToPreviousPage"
     */
    @Jpf.Action(
        forwards = {
            @Jpf.Forward(
                name = "success",
                returnAction = "returnToPreviousPage") 
        })
    protected Forward returnToPreviousPage()
    {
        return new Forward("success");
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" return-action="returnToPage"
     */
    @Jpf.Action(
        forwards = {
            @Jpf.Forward(
                name = "success",
                returnAction = "returnToPage") 
        })
    protected Forward returnToPageOverrideInputs()
    {
        return getInputOverrideForward();
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" return-action="returnToPageWithForm" return-form-type="InputForm"
     */
    @Jpf.Action(
        forwards = {
            @Jpf.Forward(
                name = "success",
                returnAction = "returnToPageWithForm",
                outputFormBeanType = InputForm.class) 
        })
    protected Forward returnToPageOverrideForm()
    {
        return getFormOverrideForward();
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" return-action="returnToPreviousPageWithForm" return-form-type="InputForm"
     */
    @Jpf.Action(
        forwards = {
            @Jpf.Forward(
                name = "success",
                returnAction = "returnToPreviousPageWithForm",
                outputFormBeanType = InputForm.class) 
        })
    protected Forward returnToPreviousPageOverrideForm()
    {
        return getFormOverrideForward();
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" return-action="returnToCurrentPage"
     */
    @Jpf.Action(
        forwards = {
            @Jpf.Forward(
                name = "success",
                returnAction = "returnToCurrentPage") 
        })
    protected Forward returnToCurrentPageOverrideInputs()
    {
        return getInputOverrideForward();
    }

    /**
     * @jpf:action
     * @jpf:forward name="success" return-action="returnToCurrentPageWithForm" return-form-type="InputForm"
     */
    @Jpf.Action(
        forwards = {
            @Jpf.Forward(
                name = "success",
                returnAction = "returnToCurrentPageWithForm",
                outputFormBeanType = InputForm.class) 
        })
    protected Forward returnToCurrentPageOverrideForm()
    {
        return getFormOverrideForward();
    }
}
