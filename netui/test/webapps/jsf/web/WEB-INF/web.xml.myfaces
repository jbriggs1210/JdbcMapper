<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
    version="2.4">

    <context-param>
        <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
        <param-value>server</param-value>
        <description>
            State saving method: "client" or "server" (= default)
            See JSF Specification 2.5.2
        </description>
    </context-param>

    <context-param>
        <param-name>org.apache.myfaces.ALLOW_JAVASCRIPT</param-name>
        <param-value>true</param-value>
        <description>
            This parameter tells MyFaces if javascript code should be allowed in the
            rendered HTML output.
            If javascript is allowed, command_link anchors will have javascript code
            that submits the corresponding form.
            If javascript is not allowed, the state saving info and nested parameters
            will be added as url parameters.
            Default: "true"
        </description>
    </context-param>
    
    <context-param>
        <param-name>org.apache.myfaces.PRETTY_HTML</param-name>
        <param-value>true</param-value>
        <description>
            If true, rendered HTML code will be formatted, so that it is "human readable".
            i.e. additional line separators and whitespace will be written, that do not
            influence the HTML code.
            Default: "true"
        </description>
    </context-param>
    
    <!-- Test Recorder Filter -->
    <filter>
      <filter-name>TestRecorderFilter</filter-name>
      <filter-class>org.apache.beehive.netui.tools.testrecorder.server.TestRecorderFilter</filter-class>
        <init-param>
            <param-name>webapp</param-name>
            <param-value>jsfWeb</param-value>
        </init-param>
    </filter>

    <filter>
      <filter-name>PageFlowJspFilter</filter-name>
      <filter-class>org.apache.beehive.netui.pageflow.PageFlowJspFilter</filter-class>
    </filter>

    <filter>
        <filter-name>PageFlowFacesFilter</filter-name>
        <filter-class>org.apache.beehive.netui.pageflow.PageFlowFacesFilter</filter-class>
    </filter>

    <filter-mapping>
      <filter-name>TestRecorderFilter</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>PageFlowJspFilter</filter-name>
        <url-pattern>*.jsp</url-pattern>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
    </filter-mapping>

    <filter-mapping>
        <filter-name>PageFlowJspFilter</filter-name>
        <url-pattern>*.jspx</url-pattern>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
    </filter-mapping>

    <filter-mapping>
        <filter-name>PageFlowFacesFilter</filter-name>
        <url-pattern>*.faces</url-pattern>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
    </filter-mapping>

    <filter-mapping>
        <filter-name>PageFlowFacesFilter</filter-name>
        <url-pattern>*.jsf</url-pattern>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
    </filter-mapping>

    <!-- Listener, that does all the startup work (configuration, init). -->
    <listener>
        <listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
    </listener>



    <!-- Test Recorder Servlet (control channel) -->
    <servlet>
      <servlet-name>TestRecorderServlet</servlet-name>
      <servlet-class>org.apache.beehive.netui.tools.testrecorder.server.TestRecorderServlet</servlet-class>
    </servlet>

    <!-- Struts Action Servlet / PageFlowController Configuration (with debugging) -->
    <servlet>
      <servlet-name>action</servlet-name>
      <servlet-class>org.apache.beehive.netui.pageflow.PageFlowActionServlet</servlet-class>

      <init-param>
        <param-name>config</param-name>
        <param-value>/_pageflow/struts-config.xml</param-value>
      </init-param>

      <init-param>
        <param-name>debug</param-name>
        <param-value>2</param-value>
      </init-param>
      <init-param>
        <param-name>detail</param-name>
        <param-value>2</param-value>
      </init-param>
      <load-on-startup>2</load-on-startup>
    </servlet>

    <!-- The XmlHttpRequest handler Servlet -->
    <servlet>
      <servlet-name>XmlHttpRequestServlet</servlet-name>
      <servlet-class>org.apache.beehive.netui.pageflow.xmlhttprequest.XmlHttpRequestServlet</servlet-class>
    </servlet>

    <!-- Struts Action Servlet Mapping -->

    <!-- Note that because Struts takes the *last* mapping here as the extension to add to
         actions posted from forms, we must have *.do come after *.jpf. -->
    <servlet-mapping>
      <servlet-name>action</servlet-name>
      <url-pattern>*.jpf</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
      <servlet-name>action</servlet-name>
      <url-pattern>*.do</url-pattern>
    </servlet-mapping>

    <!-- XmlHttpRequest Servlet -->
    <servlet-mapping>
      <servlet-name>XmlHttpRequestServlet</servlet-name>
      <url-pattern>*.xhr</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
      <servlet-name>XmlHttpRequestServlet</servlet-name>
      <url-pattern>*.render</url-pattern>
    </servlet-mapping>

    <!-- Faces Servlet -->
    <servlet>
        <servlet-name>Faces Servlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
        <load-on-startup> 1 </load-on-startup>
    </servlet>

    <!-- TestRecorder Control Servlet -->
    <servlet-mapping>
      <servlet-name>TestRecorderServlet</servlet-name>
      <url-pattern>/testRecorder</url-pattern>
    </servlet-mapping>

    <!-- 
         This mapping identifies a jsp page as having JSF content.  If a
         request comes to the server for foo.faces, the container will
         send the request to the FacesServlet, which will expect a
         corresponding foo.jsp page to exist containing the content.
    -->
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.faces</url-pattern>
    </servlet-mapping>

    <welcome-file-list>
      <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <error-page>
      <error-code>500</error-code>
      <location>/error.jsp</location>
    </error-page>

</web-app>
